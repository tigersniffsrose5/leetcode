输入一个整数数组，判断该数组是不是某二叉搜索树的后序遍历结果。如果是则返回 true，否则返回 false。假设输入的数组的任意两个数字都互不相同。

 

参考以下这颗二叉搜索树：

     5
    / \
   2   6
  / \
 1   3
示例 1：

输入: [1,6,3,2,5]
输出: false
示例 2：

输入: [1,3,2,6,5]
输出: true

递归

class Solution {
public:
    bool verifyPostorder(vector<int>& postorder) {
        return recur(postorder, 0, postorder.size()-1);
    }

    bool recur(vector<int> &postorder, int i, int j) {
        if ( i >= j )
            return true;
        int p = i;
        while ( postorder[p] < postorder[j] )
            p++;
        int m = p;
        while ( postorder[p] > postorder[j] )
            p++;
        return p == j && recur(postorder, i, m-1) && recur(postorder, m, j-1);
    }
};

单调栈

因为二叉搜索树是：根 > 左子树，根 < 右子树，常规后序遍历顺序为：左->右->根，无法保持单调性，但后序遍历逆序（也就是反向遍历给定数组）
为 根->右->左，基于这样的遍历过程，单调栈中的val越来越大，一旦出现了val小于栈顶元素val的时候，就表示要开始进入左子树了，我们要找到
这个左孩子节点直接连接的父节点，也就是找到这个子树的根，只要栈顶元素还大于当前节点，就要一直弹出，直到栈顶元素小于节点，或者栈为空。
栈顶的上一个元素就是子树节点的根。重复这个过程，直至数组遍历完，若之后的左子树的每个节点，都要比子树的根要小，则满足二叉搜索树，
否则就不是二叉搜索树。


class Solution {
public:
    bool verifyPostorder(vector<int>& postorder)
    {
        stack<int> stk;// 单调栈,其中的元素单调递增
        // 表示上一个根节点的元素，这里可以把postorder的最后一个元素root看成无穷大节点的左孩子l
        int pre_elem = INT_MAX;

        //逆向遍历（根->右->左）
        for(int i = postorder.size() - 1; i >= 0; --i)
        {
            // 左子树元素必须要小于单调栈中的根和右子树元素，否则就不是二叉搜索树
            if(postorder[i] > pre_elem) return false;

            while(!stk.empty() && postorder[i] < stk.top())
            {
                // 数组元素小于单调栈的元素了，发生递减，说明左子树出现
                // 需要找到这个左子树的父节点，递增栈中第一个比其大的元素就是他的父节点
                // 一边寻找一边弹出比它大（比它的父节点也大）的右子树
                pre_elem = stk.top();
                stk.pop();
            }
            // 如果找到了符合要求的父节点，将父节点也弹出，自己入栈，继续构造单调栈
            stk.push(postorder[i]);
        }
        return true;
    }
};




