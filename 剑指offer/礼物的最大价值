在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？

 

示例 1:

输入: 
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 12
解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物

动态规划

空间复杂度优化：
由于 dp[i][j]dp[i][j] 只与 dp[i-1][j]dp[i−1][j] , dp[i][j-1]dp[i][j−1] , grid[i][j]grid[i][j] 有关系，因此可以将原矩阵 gridgrid 用作 dpdp 矩阵，即直接在 gridgrid 上修改即可。
应用此方法可省去 dpdp 矩阵使用的额外空间，因此空间复杂度从 O(MN)O(MN) 降至 O(1)O(1) 。

提升效率：当 gridgrid 矩阵很大时， i = 0i=0 或 j = 0j=0 的情况仅占极少数，相当循环每轮都冗余了一次判断。因此，可先初始化矩阵第一行和第一列，再开始遍历递推。

class Solution {
public:
    int maxValue(vector<vector<int>>& grid) {
        
        int m = grid.size(), n = grid[0].size();

        for ( int j = 1; j < n; ++j )     //初始化第一行
            grid[0][j] = grid[0][j-1]+grid[0][j];
        for ( int i = 1; i < m; ++i )     //初始化第一列
            grid[i][0] = grid[i-1][0]+grid[i][0];

        for ( int i = 1; i < m; ++i ) 
            for ( int j = 1; j < n; ++j )
                grid[i][j] = grid[i][j]+max(grid[i-1][j],grid[i][j-1]);
        
        return grid[m-1][n-1];
    }
};
