给定一个字符串，请将字符串里的字符按照出现的频率降序排列。

示例 1:

输入:
"tree"

输出:
"eert"

解释:
'e'出现两次，'r'和't'都只出现一次。
因此'e'必须出现在'r'和't'之前。此外，"eetr"也是一个有效的答案。
示例 2:

输入:
"cccaaa"

输出:
"cccaaa"

解释:
'c'和'a'都出现三次。此外，"aaaccc"也是有效的答案。
注意"cacaca"是不正确的，因为相同的字母必须放在一起。
示例 3:

输入:
"Aabb"

输出:
"bbAa"

解释:
此外，"bbaA"也是一个有效的答案，但"Aabb"是不正确的。
注意'A'和'a'被认为是两种不同的字符。

class Solution {
public:
    string frequencySort(string s) {
        string res = "";
        unordered_map<char, int> myMap;
        vector<pair<char, int>> myVec;
        
        //统计所有的字母出现的频次
        for (int i = 0; i < s.size(); i++) {
            myMap[s[i]]++;
        }
        
        //将字母及频次存入Vector，便于之后的排序
        for (auto it = myMap.begin(); it != myMap.end(); it++) {
            myVec.push_back(make_pair(it->first, it->second));
        }
        
        //按照字母出现的频次从大到小进行排序
        sort(myVec.begin(), myVec.end(), [](const pair<char, int>& x, const pair<char, int>& y) -> int {return x.second > y.second;});
  
        //将排序后的字母，根据其频次，依次添加对应数量的该字母进入结果字符串中
        for (auto it = myVec.begin(); it != myVec.end(); it++) {
            for (int i = 0; i < it->second; i++) {
                res += it->first;
            }
        }
        return res;
    }
};
