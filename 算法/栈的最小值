请设计一个栈，除了常规栈支持的pop与push函数以外，还支持min函数，该函数返回栈元素中的最小值。执行push、pop和min操作的时间复杂度必须为O(1)。


示例：

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.

双栈
1.一个栈正常压栈元素
2.另一个栈将最小值压栈


class MinStack {
public:
    stack<int> stk, stkhelp;
    MinStack() {

    }
    void push(int x) {
        stk.push(x);
        if(stkhelp.empty()) stkhelp.push(x); //为空压入x
        else stkhelp.push(min(stkhelp.top(), x));
    }
    void pop() {
        stk.pop();
        stkhelp.pop();
    }
    int top() {
        return stk.top();
    }
    int getMin() {
        return stkhelp.top();
    }
};

优化：
1.加上异常抛出
2.改为索引进辅助栈，在push的时候判断一下，如果比最小值还大，就不加入辅助栈。pop的时候，如果不是最小值，辅助栈就不出栈。这样一来，辅助栈就不会有大量重复元素了。
